/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    dependencies {
        classpath group: 'gchq', name: 'urlDependencyPlugin', version: 'v0.2.0'
    }
    repositories {
        mavenLocal()
        jcenter()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

repositories {
    mavenLocal()
    jcenter()
}

apply plugin: 'application'
mainClassName = 'stroom.query.elastic.App'

apply plugin: 'gchq.urldependencies'

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified") {
        val = project.getProperty(propName)
        println "Using propery $propName with value $val"
    } else {
        val = defaultValue
        println "Propery $propName has no value, using default value $val"
    }
    return val;
}

ext.versions = [
    //----------Stroom-Annotations-----
    stroomQueryElastic: getPropertyOrDefault('version', 'SNAPSHOT'),

    dropwizard: '1.2.0',
    shiro: '1.3.2',
    curator: '2.12.0',
    eventLogging: 'v3.1.0',
    elasticSearch: '5.6.3',

    //same version for both stroom-query-api and stroom-query-common
    stroomQuery: 'v2.0.0-alpha.5',
    stroomExpression: 'v1.0.0',
]

allprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    group = 'stroom-query-elastic'
    version = versions.stroomQueryElastic
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.compileJava.dependsOn downloadUrlDependencies

    repositories {
        mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
    }
}

ext.testVersions = [
    junit: '4.12'
]

ext.deps = [
    elasticSearch: "org.elasticsearch.client:transport:$versions.elasticSearch",
    dropwizard_core: "io.dropwizard:dropwizard-core:$versions.dropwizard",
    dropwizard_auth: "io.dropwizard:dropwizard-auth:$versions.dropwizard",
    dropwizard_hibernate: "io.dropwizard:dropwizard-hibernate:$versions.dropwizard",
    dropwizard_auth_jwt: "com.github.toastshaman:dropwizard-auth-jwt:1.0.2-0",
    flyway_core: "org.flywaydb:flyway-core:4.0.3",
    bcrypt: 'de.svenkubiak:jBCrypt:0.4.1',
    jose4j: "org.bitbucket.b_c:jose4j:0.5.2",
    guice: "com.google.inject:guice:4.0",
    slf4j: "org.slf4j:slf4j-api:1.7.24",
    shiro_core: "org.apache.shiro:shiro-core:$versions.shiro",
    curator_client: "org.apache.curator:curator-client:$versions.curator",
    curator_framework: "org.apache.curator:curator-framework:$versions.curator",
    curator_recipies: "org.apache.curator:curator-recipes:$versions.curator",
    curator_service_discovery: "org.apache.curator:curator-x-discovery:$versions.curator",
    simple_java_mail: 'org.simplejavamail:simple-java-mail:4.3.0',
    mysql_connector_java: "mysql:mysql-connector-java:5.1.40",
    kafka: 'org.apache.kafka:kafka-clients:0.10.0.1' //CDH5.10 uses kafka 10.0, Kafka <10.2 is picky about client and server versions.
]

ext.testDeps = [
    junit: "junit:junit:$testVersions.junit",
    assertj: 'org.assertj:assertj-core:3.8.0',
    dropwizard_testing: "io.dropwizard:dropwizard-testing:$versions.dropwizard",
    fuel: 'com.github.kittinunf.fuel:fuel:1.7.0',
    moshi: 'com.squareup.moshi:moshi:1.5.0',
    unirest: 'com.mashape.unirest:unirest-java:1.4.9'
]

ext.urlLibs = [
    eventLogging: "event-logging-$versions.eventLogging",
    stroomQueryApi: "stroom-query-api-$versions.stroomQuery",
    stroomQueryCommon: "stroom-query-common-$versions.stroomQuery",
    stroomExpression: "stroom-expression-$versions.stroomExpression"
]

urlDependencies {
    libs "libs"

    compile(urlLibs.eventLogging,
            "https://github.com/gchq/event-logging/releases/download/$versions.eventLogging/${urlLibs.eventLogging}.jar")
    compile(urlLibs.stroomQueryApi,
            "https://github.com/gchq/stroom-query/releases/download/$versions.stroomQuery/${urlLibs.stroomQueryApi}.jar")
    compile(urlLibs.stroomQueryCommon,
            "https://github.com/gchq/stroom-query/releases/download/$versions.stroomQuery/${urlLibs.stroomQueryCommon}.jar")
    compile(urlLibs.stroomExpression,
            "https://github.com/gchq/stroom-expression/releases/download/$versions.stroomExpression/${urlLibs.stroomExpression}.jar")
}

// Stuff from child build.gradle
jar {
    manifest {
        attributes(
                "Implementation-Title": "Stroom Annotations Service",
                "Implementation-Version": version,
                "Main-Class" : "stroom.annotations.service.App"
        )
    }

    archiveName 'stroom-annotations-service.jar'
}

shadowJar {
    // Allows us to build fat jars with lots of files
    zip64 true
    mergeServiceFiles()
    archiveName 'stroom-annotations-service-all.jar'
}

sourceSets {
    // This lets us use different directories for our integration tests.
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    // This means our integration tests get all the dependencies from our tests and we don't need to specify them twice.
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

// This task lets us run the actual integration tests.
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "standardOut", "started", "passed", "skipped", "failed"
    }
}

// These lines pull the integration test task into our build process.
check.dependsOn integrationTest
integrationTest.mustRunAfter test

// This means the reports from our integration tests won't over-write the reports from our unit tests.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

dependencies {
    compile urlDependencies.get(urlLibs.eventLogging)
    //compile urlDependencies.get(urlLibs.stroomQueryApi)
    //compile urlDependencies.get(urlLibs.stroomQueryCommon)
    compile urlDependencies.get(urlLibs.stroomExpression)

    compile "stroom:stroom-query-api:JOE"
    compile "stroom:stroom-query-common:JOE"
    compile "stroom:stroom-query-audit:JOE"

    compile deps.kafka
    compile deps.dropwizard_core
    compile deps.slf4j
    compile deps.dropwizard_auth
    compile deps.dropwizard_auth_jwt
    compile deps.dropwizard_hibernate
    compile deps.bcrypt
    compile deps.jose4j
    compile deps.slf4j
    compile deps.shiro_core
    compile deps.curator_service_discovery
    compile deps.simple_java_mail
    compile deps.elasticSearch

    runtime deps.mysql_connector_java

    testCompile testDeps.junit
    testCompile testDeps.assertj
    testCompile 'org.apache.directory.studio:org.apache.commons.io:2.4'

    integrationTestCompile testDeps.dropwizard_testing
    integrationTestCompile testDeps.moshi
    integrationTestCompile testDeps.unirest

    integrationTestRuntime 'org.xerial:sqlite-jdbc:3.20.1'
}